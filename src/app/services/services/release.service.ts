/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { approveReturnBorrowRelease } from '../fn/release/approve-return-borrow-release';
import { ApproveReturnBorrowRelease$Params } from '../fn/release/approve-return-borrow-release';
import { borrowRelease } from '../fn/release/borrow-release';
import { BorrowRelease$Params } from '../fn/release/borrow-release';
import { findAllBorrowedReleases } from '../fn/release/find-all-borrowed-releases';
import { FindAllBorrowedReleases$Params } from '../fn/release/find-all-borrowed-releases';
import { findAllReleases } from '../fn/release/find-all-releases';
import { FindAllReleases$Params } from '../fn/release/find-all-releases';
import { findAllReleasesByOwner } from '../fn/release/find-all-releases-by-owner';
import { FindAllReleasesByOwner$Params } from '../fn/release/find-all-releases-by-owner';
import { findAllReturnedReleases } from '../fn/release/find-all-returned-releases';
import { FindAllReturnedReleases$Params } from '../fn/release/find-all-returned-releases';
import { findReleaseById } from '../fn/release/find-release-by-id';
import { FindReleaseById$Params } from '../fn/release/find-release-by-id';
import { PageResponseBorrowedReleaseResponse } from '../models/page-response-borrowed-release-response';
import { PageResponseReleaseResponse } from '../models/page-response-release-response';
import { ReleaseResponse } from '../models/release-response';
import { returnBorrowRelease } from '../fn/release/return-borrow-release';
import { ReturnBorrowRelease$Params } from '../fn/release/return-borrow-release';
import { saveRelease } from '../fn/release/save-release';
import { SaveRelease$Params } from '../fn/release/save-release';
import { updateArchivedStatus } from '../fn/release/update-archived-status';
import { UpdateArchivedStatus$Params } from '../fn/release/update-archived-status';
import { updateShareableStatus } from '../fn/release/update-shareable-status';
import { UpdateShareableStatus$Params } from '../fn/release/update-shareable-status';
import { uploadReleaseCoverPicture } from '../fn/release/upload-release-cover-picture';
import { UploadReleaseCoverPicture$Params } from '../fn/release/upload-release-cover-picture';

@Injectable({ providedIn: 'root' })
export class ReleaseService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `findAllReleases()` */
  static readonly FindAllReleasesPath = '/releases';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllReleases()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllReleases$Response(params?: FindAllReleases$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseReleaseResponse>> {
    return findAllReleases(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllReleases$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllReleases(params?: FindAllReleases$Params, context?: HttpContext): Observable<PageResponseReleaseResponse> {
    return this.findAllReleases$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseReleaseResponse>): PageResponseReleaseResponse => r.body)
    );
  }

  /** Path part for operation `saveRelease()` */
  static readonly SaveReleasePath = '/releases';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveRelease()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveRelease$Response(params: SaveRelease$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return saveRelease(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveRelease$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveRelease(params: SaveRelease$Params, context?: HttpContext): Observable<number> {
    return this.saveRelease$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `uploadReleaseCoverPicture()` */
  static readonly UploadReleaseCoverPicturePath = '/releases/cover/{release-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadReleaseCoverPicture()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadReleaseCoverPicture$Response(params: UploadReleaseCoverPicture$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return uploadReleaseCoverPicture(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadReleaseCoverPicture$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadReleaseCoverPicture(params: UploadReleaseCoverPicture$Params, context?: HttpContext): Observable<{
}> {
    return this.uploadReleaseCoverPicture$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `borrowRelease()` */
  static readonly BorrowReleasePath = '/releases/borrow/{release-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `borrowRelease()` instead.
   *
   * This method doesn't expect any request body.
   */
  borrowRelease$Response(params: BorrowRelease$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return borrowRelease(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `borrowRelease$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  borrowRelease(params: BorrowRelease$Params, context?: HttpContext): Observable<number> {
    return this.borrowRelease$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `updateShareableStatus()` */
  static readonly UpdateShareableStatusPath = '/releases/shareable/{release-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateShareableStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateShareableStatus$Response(params: UpdateShareableStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return updateShareableStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateShareableStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateShareableStatus(params: UpdateShareableStatus$Params, context?: HttpContext): Observable<number> {
    return this.updateShareableStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `returnBorrowRelease()` */
  static readonly ReturnBorrowReleasePath = '/releases/borrow/return/{release-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `returnBorrowRelease()` instead.
   *
   * This method doesn't expect any request body.
   */
  returnBorrowRelease$Response(params: ReturnBorrowRelease$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return returnBorrowRelease(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `returnBorrowRelease$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  returnBorrowRelease(params: ReturnBorrowRelease$Params, context?: HttpContext): Observable<number> {
    return this.returnBorrowRelease$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `approveReturnBorrowRelease()` */
  static readonly ApproveReturnBorrowReleasePath = '/releases/borrow/return/approve/{release-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `approveReturnBorrowRelease()` instead.
   *
   * This method doesn't expect any request body.
   */
  approveReturnBorrowRelease$Response(params: ApproveReturnBorrowRelease$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return approveReturnBorrowRelease(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `approveReturnBorrowRelease$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  approveReturnBorrowRelease(params: ApproveReturnBorrowRelease$Params, context?: HttpContext): Observable<number> {
    return this.approveReturnBorrowRelease$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `updateArchivedStatus()` */
  static readonly UpdateArchivedStatusPath = '/releases/archived/{release-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateArchivedStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateArchivedStatus$Response(params: UpdateArchivedStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return updateArchivedStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateArchivedStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateArchivedStatus(params: UpdateArchivedStatus$Params, context?: HttpContext): Observable<number> {
    return this.updateArchivedStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findReleaseById()` */
  static readonly FindReleaseByIdPath = '/releases/{release-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findReleaseById()` instead.
   *
   * This method doesn't expect any request body.
   */
  findReleaseById$Response(params: FindReleaseById$Params, context?: HttpContext): Observable<StrictHttpResponse<ReleaseResponse>> {
    return findReleaseById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findReleaseById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findReleaseById(params: FindReleaseById$Params, context?: HttpContext): Observable<ReleaseResponse> {
    return this.findReleaseById$Response(params, context).pipe(
      map((r: StrictHttpResponse<ReleaseResponse>): ReleaseResponse => r.body)
    );
  }

  /** Path part for operation `findAllReturnedReleases()` */
  static readonly FindAllReturnedReleasesPath = '/releases/returned';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllReturnedReleases()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllReturnedReleases$Response(params?: FindAllReturnedReleases$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseBorrowedReleaseResponse>> {
    return findAllReturnedReleases(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllReturnedReleases$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllReturnedReleases(params?: FindAllReturnedReleases$Params, context?: HttpContext): Observable<PageResponseBorrowedReleaseResponse> {
    return this.findAllReturnedReleases$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseBorrowedReleaseResponse>): PageResponseBorrowedReleaseResponse => r.body)
    );
  }

  /** Path part for operation `findAllReleasesByOwner()` */
  static readonly FindAllReleasesByOwnerPath = '/releases/owner';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllReleasesByOwner()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllReleasesByOwner$Response(params?: FindAllReleasesByOwner$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseReleaseResponse>> {
    return findAllReleasesByOwner(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllReleasesByOwner$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllReleasesByOwner(params?: FindAllReleasesByOwner$Params, context?: HttpContext): Observable<PageResponseReleaseResponse> {
    return this.findAllReleasesByOwner$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseReleaseResponse>): PageResponseReleaseResponse => r.body)
    );
  }

  /** Path part for operation `findAllBorrowedReleases()` */
  static readonly FindAllBorrowedReleasesPath = '/releases/borrowed';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllBorrowedReleases()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllBorrowedReleases$Response(params?: FindAllBorrowedReleases$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseBorrowedReleaseResponse>> {
    return findAllBorrowedReleases(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllBorrowedReleases$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllBorrowedReleases(params?: FindAllBorrowedReleases$Params, context?: HttpContext): Observable<PageResponseBorrowedReleaseResponse> {
    return this.findAllBorrowedReleases$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseBorrowedReleaseResponse>): PageResponseBorrowedReleaseResponse => r.body)
    );
  }

}
